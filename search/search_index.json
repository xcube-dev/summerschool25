{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Application packages in the xcube ecosystem","text":""},{"location":"#overview","title":"Overview","text":"<p>In this course, you'll get to know:</p> <ul> <li>OGC Earth Observation Application Packages, a framework that lets you   package almost any software into a reusable module for deployment on cloud   infrastructure.</li> <li>xcube, a multitalented, ever-growing toolkit and ecosystem for working   with data cubes in Python.</li> <li>xcengine, a new tool that lets you automatically turn your Python   Jupyter notebooks into both Application Packages and xcube server   containers.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>To follow along with the course content, you'll need to have the following installed and working on your computer:</p> <ul> <li>Your preferred terminal emulator, preferably running the bash shell.</li> <li>A conda-based Python environment, which we'll use to set up an   environment in which to run the Python tools. I recommend   mamba. You can find installation   instructions   here.</li> <li>git</li> <li>docker</li> </ul> <p>If there's enough time at the end, we'll also set up an Application Package Platform using ZOO and use it to run an Application Package locally! If you also want to follow along with this on your own machine, you should have the following installed:</p> <ul> <li>minikube</li> <li>helm</li> <li>kubectl</li> </ul>"},{"location":"#the-course-github-repository","title":"The course GitHub repository","text":"<p>The resources for the course are in a GitHub repository at https://github.com/xcube-dev/summerschool25/ (which also contains the source text for this web page).</p> <p>Use git to clone this repository onto your computer and follow the instructions in the <code>README.md</code> file to get set up.</p>"},{"location":"#outline-of-course-content","title":"Outline of course content","text":"<ol> <li>I'll give a quick introduction to Application Packages, what they're useful    for, and how they are structured.</li> <li>We'll go hands-on, write a (very!) simple Application Package by hand, and    run it using <code>cwltool</code>.</li> <li>I'll introduce xcengine, a program to turn Jupyter notebooks into    Application Packages.</li> <li>We'll run xcengine on a simple example notebook, then look at the    application package that it produces and run it using <code>cwltool</code>.</li> <li>I'll introduce xcube and describe the extra functionality built into every    xcengine Application Package: a self-contained xcube server and viewer    deployment!</li> <li>We'll run our generated Application Package container image in \"xcube    mode\" and see its output data in the viewer.</li> <li>If we have enough time at the end, I'll demonstrate running ZOO \u2013    a fully-fledged Application Package platform \u2013 on a local computer.    If you've pre-installed the optional requirements (see above), you    can follow along on your own machine.</li> </ol>"},{"location":"#background-reading","title":"Background reading","text":"<p>None of these links are required reading, but they're good starting points if you want to do some extra preparation or if you're curious about the technologies involved.</p> <ul> <li>OGC Best Practice for Earth Observation Application Package   is the official document defining Application Packages. It's long, detailed,   technical, and not recommended for reading all the way through, but it's   the official reference if you ever want to look up some technical detail.</li> <li>Earth Observation Application Package resources at   eoap.github.io, a collection of hands-on   Application Package tutorials. A much friendlier introduction than the   official definition document!</li> <li>The Common Workflow Language (CWL) user   guide introduces the language   used to write Application Package definitions.</li> <li>A docker tutorial for beginners.   Application Packages rely on Docker container images to package their code.   This tutorial is a good starting point if you haven't worked with Docker   before.</li> <li>The xcengine documentation and   GitHub repository. xcengine   currently has limited documentation, but if you're curious you can   install it from the repository and try out one of the examples.</li> <li>The xcube documentation. We won't be   using xcube extensively during the course, but we'll run an xcube   server and viewer from a generated docker image.</li> <li>The xcube Viewer documentation   and the public xcube Viewer demo.   In the course we'll start an xcube Viewer from a docker image, but we   won't do any serious work in the Viewer. Nevertheless, you might want   to try it out in advance.</li> </ul>"}]}